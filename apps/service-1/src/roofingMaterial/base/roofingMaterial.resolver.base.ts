/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateRoofingMaterialArgs } from "./CreateRoofingMaterialArgs";
import { UpdateRoofingMaterialArgs } from "./UpdateRoofingMaterialArgs";
import { DeleteRoofingMaterialArgs } from "./DeleteRoofingMaterialArgs";
import { RoofingMaterialCountArgs } from "./RoofingMaterialCountArgs";
import { RoofingMaterialFindManyArgs } from "./RoofingMaterialFindManyArgs";
import { RoofingMaterialFindUniqueArgs } from "./RoofingMaterialFindUniqueArgs";
import { RoofingMaterial } from "./RoofingMaterial";
import { ColorFindManyArgs } from "../../color/base/ColorFindManyArgs";
import { Color } from "../../color/base/Color";
import { RoofingMaterialService } from "../roofingMaterial.service";
@graphql.Resolver(() => RoofingMaterial)
export class RoofingMaterialResolverBase {
  constructor(protected readonly service: RoofingMaterialService) {}

  async _roofingMaterialsMeta(
    @graphql.Args() args: RoofingMaterialCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RoofingMaterial])
  async roofingMaterials(
    @graphql.Args() args: RoofingMaterialFindManyArgs
  ): Promise<RoofingMaterial[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => RoofingMaterial, { nullable: true })
  async roofingMaterial(
    @graphql.Args() args: RoofingMaterialFindUniqueArgs
  ): Promise<RoofingMaterial | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RoofingMaterial)
  async createRoofingMaterial(
    @graphql.Args() args: CreateRoofingMaterialArgs
  ): Promise<RoofingMaterial> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => RoofingMaterial)
  async updateRoofingMaterial(
    @graphql.Args() args: UpdateRoofingMaterialArgs
  ): Promise<RoofingMaterial | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RoofingMaterial)
  async deleteRoofingMaterial(
    @graphql.Args() args: DeleteRoofingMaterialArgs
  ): Promise<RoofingMaterial | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Color], { name: "colors" })
  async resolveFieldColors(
    @graphql.Parent() parent: RoofingMaterial,
    @graphql.Args() args: ColorFindManyArgs
  ): Promise<Color[]> {
    const results = await this.service.findColors(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
