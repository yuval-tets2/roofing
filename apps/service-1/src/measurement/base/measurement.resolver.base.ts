/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateMeasurementArgs } from "./CreateMeasurementArgs";
import { UpdateMeasurementArgs } from "./UpdateMeasurementArgs";
import { DeleteMeasurementArgs } from "./DeleteMeasurementArgs";
import { MeasurementCountArgs } from "./MeasurementCountArgs";
import { MeasurementFindManyArgs } from "./MeasurementFindManyArgs";
import { MeasurementFindUniqueArgs } from "./MeasurementFindUniqueArgs";
import { Measurement } from "./Measurement";
import { Job } from "../../job/base/Job";
import { MeasurementService } from "../measurement.service";
@graphql.Resolver(() => Measurement)
export class MeasurementResolverBase {
  constructor(protected readonly service: MeasurementService) {}

  async _measurementsMeta(
    @graphql.Args() args: MeasurementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Measurement])
  async measurements(
    @graphql.Args() args: MeasurementFindManyArgs
  ): Promise<Measurement[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Measurement, { nullable: true })
  async measurement(
    @graphql.Args() args: MeasurementFindUniqueArgs
  ): Promise<Measurement | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Measurement)
  async createMeasurement(
    @graphql.Args() args: CreateMeasurementArgs
  ): Promise<Measurement> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        job: {
          connect: args.data.job,
        },
      },
    });
  }

  @graphql.Mutation(() => Measurement)
  async updateMeasurement(
    @graphql.Args() args: UpdateMeasurementArgs
  ): Promise<Measurement | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          job: {
            connect: args.data.job,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Measurement)
  async deleteMeasurement(
    @graphql.Args() args: DeleteMeasurementArgs
  ): Promise<Measurement | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Job, {
    nullable: true,
    name: "job",
  })
  async resolveFieldJob(
    @graphql.Parent() parent: Measurement
  ): Promise<Job | null> {
    const result = await this.service.getJob(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
