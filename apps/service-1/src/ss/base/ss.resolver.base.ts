/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DeleteSsArgs } from "./DeleteSsArgs";
import { SsCountArgs } from "./SsCountArgs";
import { SsFindManyArgs } from "./SsFindManyArgs";
import { SsFindUniqueArgs } from "./SsFindUniqueArgs";
import { Ss } from "./Ss";
import { SsService } from "../ss.service";
@graphql.Resolver(() => Ss)
export class SsResolverBase {
  constructor(protected readonly service: SsService) {}

  async _ssesMeta(
    @graphql.Args() args: SsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Ss])
  async sses(@graphql.Args() args: SsFindManyArgs): Promise<Ss[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Ss, { nullable: true })
  async ss(@graphql.Args() args: SsFindUniqueArgs): Promise<Ss | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Ss)
  async deleteSs(@graphql.Args() args: DeleteSsArgs): Promise<Ss | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
