/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateDetailArgs } from "./CreateDetailArgs";
import { UpdateDetailArgs } from "./UpdateDetailArgs";
import { DeleteDetailArgs } from "./DeleteDetailArgs";
import { DetailCountArgs } from "./DetailCountArgs";
import { DetailFindManyArgs } from "./DetailFindManyArgs";
import { DetailFindUniqueArgs } from "./DetailFindUniqueArgs";
import { Detail } from "./Detail";
import { DetailService } from "../detail.service";
@graphql.Resolver(() => Detail)
export class DetailResolverBase {
  constructor(protected readonly service: DetailService) {}

  async _detailsMeta(
    @graphql.Args() args: DetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Detail])
  async details(@graphql.Args() args: DetailFindManyArgs): Promise<Detail[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Detail, { nullable: true })
  async detail(
    @graphql.Args() args: DetailFindUniqueArgs
  ): Promise<Detail | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Detail)
  async createDetail(@graphql.Args() args: CreateDetailArgs): Promise<Detail> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Detail)
  async updateDetail(
    @graphql.Args() args: UpdateDetailArgs
  ): Promise<Detail | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Detail)
  async deleteDetail(
    @graphql.Args() args: DeleteDetailArgs
  ): Promise<Detail | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
