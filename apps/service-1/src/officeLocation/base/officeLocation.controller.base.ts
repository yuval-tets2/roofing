/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OfficeLocationService } from "../officeLocation.service";
import { OfficeLocationCreateInput } from "./OfficeLocationCreateInput";
import { OfficeLocationWhereInput } from "./OfficeLocationWhereInput";
import { OfficeLocationWhereUniqueInput } from "./OfficeLocationWhereUniqueInput";
import { OfficeLocationFindManyArgs } from "./OfficeLocationFindManyArgs";
import { OfficeLocationUpdateInput } from "./OfficeLocationUpdateInput";
import { OfficeLocation } from "./OfficeLocation";
import { PricingFindManyArgs } from "../../pricing/base/PricingFindManyArgs";
import { Pricing } from "../../pricing/base/Pricing";
import { PricingWhereUniqueInput } from "../../pricing/base/PricingWhereUniqueInput";

export class OfficeLocationControllerBase {
  constructor(protected readonly service: OfficeLocationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OfficeLocation })
  async create(
    @common.Body() data: OfficeLocationCreateInput
  ): Promise<OfficeLocation> {
    return await this.service.create({
      data: {
        ...data,

        company: {
          connect: data.company,
        },
      },
      select: {
        city: true,

        company: {
          select: {
            id: true,
          },
        },

        country: true,
        createdAt: true,
        description: true,
        email: true,
        foundingYear: true,
        id: true,
        logo: true,
        logoStatus: true,
        name: true,
        phoneNumber: true,
        state: true,
        status: true,
        street1: true,
        street2: true,
        updatedAt: true,
        zipCode: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [OfficeLocation] })
  @ApiNestedQuery(OfficeLocationFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<OfficeLocation[]> {
    const args = plainToClass(OfficeLocationFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        city: true,

        company: {
          select: {
            id: true,
          },
        },

        country: true,
        createdAt: true,
        description: true,
        email: true,
        foundingYear: true,
        id: true,
        logo: true,
        logoStatus: true,
        name: true,
        phoneNumber: true,
        state: true,
        status: true,
        street1: true,
        street2: true,
        updatedAt: true,
        zipCode: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OfficeLocation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: OfficeLocationWhereUniqueInput
  ): Promise<OfficeLocation | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        city: true,

        company: {
          select: {
            id: true,
          },
        },

        country: true,
        createdAt: true,
        description: true,
        email: true,
        foundingYear: true,
        id: true,
        logo: true,
        logoStatus: true,
        name: true,
        phoneNumber: true,
        state: true,
        status: true,
        street1: true,
        street2: true,
        updatedAt: true,
        zipCode: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OfficeLocation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: OfficeLocationWhereUniqueInput,
    @common.Body() data: OfficeLocationUpdateInput
  ): Promise<OfficeLocation | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          company: {
            connect: data.company,
          },
        },
        select: {
          city: true,

          company: {
            select: {
              id: true,
            },
          },

          country: true,
          createdAt: true,
          description: true,
          email: true,
          foundingYear: true,
          id: true,
          logo: true,
          logoStatus: true,
          name: true,
          phoneNumber: true,
          state: true,
          status: true,
          street1: true,
          street2: true,
          updatedAt: true,
          zipCode: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OfficeLocation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: OfficeLocationWhereUniqueInput
  ): Promise<OfficeLocation | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          city: true,

          company: {
            select: {
              id: true,
            },
          },

          country: true,
          createdAt: true,
          description: true,
          email: true,
          foundingYear: true,
          id: true,
          logo: true,
          logoStatus: true,
          name: true,
          phoneNumber: true,
          state: true,
          status: true,
          street1: true,
          street2: true,
          updatedAt: true,
          zipCode: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/pricing")
  @ApiNestedQuery(PricingFindManyArgs)
  async findManyPricing(
    @common.Req() request: Request,
    @common.Param() params: OfficeLocationWhereUniqueInput
  ): Promise<Pricing[]> {
    const query = plainToClass(PricingFindManyArgs, request.query);
    const results = await this.service.findPricing(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        officeLocation: {
          select: {
            id: true,
          },
        },

        price: true,
        roofingMaterialId: true,
        status: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/pricing")
  async connectPricing(
    @common.Param() params: OfficeLocationWhereUniqueInput,
    @common.Body() body: PricingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pricing: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/pricing")
  async updatePricing(
    @common.Param() params: OfficeLocationWhereUniqueInput,
    @common.Body() body: PricingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pricing: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/pricing")
  async disconnectPricing(
    @common.Param() params: OfficeLocationWhereUniqueInput,
    @common.Body() body: PricingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pricing: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
