/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateOfficeLocationArgs } from "./CreateOfficeLocationArgs";
import { UpdateOfficeLocationArgs } from "./UpdateOfficeLocationArgs";
import { DeleteOfficeLocationArgs } from "./DeleteOfficeLocationArgs";
import { OfficeLocationCountArgs } from "./OfficeLocationCountArgs";
import { OfficeLocationFindManyArgs } from "./OfficeLocationFindManyArgs";
import { OfficeLocationFindUniqueArgs } from "./OfficeLocationFindUniqueArgs";
import { OfficeLocation } from "./OfficeLocation";
import { PricingFindManyArgs } from "../../pricing/base/PricingFindManyArgs";
import { Pricing } from "../../pricing/base/Pricing";
import { Company } from "../../company/base/Company";
import { OfficeLocationService } from "../officeLocation.service";
@graphql.Resolver(() => OfficeLocation)
export class OfficeLocationResolverBase {
  constructor(protected readonly service: OfficeLocationService) {}

  async _officeLocationsMeta(
    @graphql.Args() args: OfficeLocationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OfficeLocation])
  async officeLocations(
    @graphql.Args() args: OfficeLocationFindManyArgs
  ): Promise<OfficeLocation[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => OfficeLocation, { nullable: true })
  async officeLocation(
    @graphql.Args() args: OfficeLocationFindUniqueArgs
  ): Promise<OfficeLocation | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OfficeLocation)
  async createOfficeLocation(
    @graphql.Args() args: CreateOfficeLocationArgs
  ): Promise<OfficeLocation> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        company: {
          connect: args.data.company,
        },
      },
    });
  }

  @graphql.Mutation(() => OfficeLocation)
  async updateOfficeLocation(
    @graphql.Args() args: UpdateOfficeLocationArgs
  ): Promise<OfficeLocation | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          company: {
            connect: args.data.company,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OfficeLocation)
  async deleteOfficeLocation(
    @graphql.Args() args: DeleteOfficeLocationArgs
  ): Promise<OfficeLocation | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Pricing], { name: "pricing" })
  async resolveFieldPricing(
    @graphql.Parent() parent: OfficeLocation,
    @graphql.Args() args: PricingFindManyArgs
  ): Promise<Pricing[]> {
    const results = await this.service.findPricing(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Company, {
    nullable: true,
    name: "company",
  })
  async resolveFieldCompany(
    @graphql.Parent() parent: OfficeLocation
  ): Promise<Company | null> {
    const result = await this.service.getCompany(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
