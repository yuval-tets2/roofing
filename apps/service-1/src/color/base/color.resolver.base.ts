/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateColorArgs } from "./CreateColorArgs";
import { UpdateColorArgs } from "./UpdateColorArgs";
import { DeleteColorArgs } from "./DeleteColorArgs";
import { ColorCountArgs } from "./ColorCountArgs";
import { ColorFindManyArgs } from "./ColorFindManyArgs";
import { ColorFindUniqueArgs } from "./ColorFindUniqueArgs";
import { Color } from "./Color";
import { RoofingMaterial } from "../../roofingMaterial/base/RoofingMaterial";
import { ColorService } from "../color.service";
@graphql.Resolver(() => Color)
export class ColorResolverBase {
  constructor(protected readonly service: ColorService) {}

  async _colorsMeta(
    @graphql.Args() args: ColorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Color])
  async colors(@graphql.Args() args: ColorFindManyArgs): Promise<Color[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Color, { nullable: true })
  async color(
    @graphql.Args() args: ColorFindUniqueArgs
  ): Promise<Color | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Color)
  async createColor(@graphql.Args() args: CreateColorArgs): Promise<Color> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        roofingMaterial: {
          connect: args.data.roofingMaterial,
        },
      },
    });
  }

  @graphql.Mutation(() => Color)
  async updateColor(
    @graphql.Args() args: UpdateColorArgs
  ): Promise<Color | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          roofingMaterial: {
            connect: args.data.roofingMaterial,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Color)
  async deleteColor(
    @graphql.Args() args: DeleteColorArgs
  ): Promise<Color | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => RoofingMaterial, {
    nullable: true,
    name: "roofingMaterial",
  })
  async resolveFieldRoofingMaterial(
    @graphql.Parent() parent: Color
  ): Promise<RoofingMaterial | null> {
    const result = await this.service.getRoofingMaterial(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
